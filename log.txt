run:
    php artisan serve

Comandos make:
    -- php artisan make:xxx --help
    - php artisan make:controller nombre : crea un nuevo controlador y todo lo demas
    php artisan make:controller

    - php artisan make:migration nombre: Crear modificar, borrar tablas en la BD
    //video 09 {
        php artisan make:migration create_messages_table --create messages
        php artisan migrate     (regenera todas las migraciones)

        php artisan make:migration add_created_at_index_to_messages_table --table messages (modificar una tablas)
        php artisan migrate

        // vuelve atras la ultima migracion ejecutada
        php artisan migrate:rollback

        // borra todo
        php artisan migrate:reset

        // borra y luego carga todo
        php artisan migrate:refresh
    }

    //video 10:{
        - php artisan make:model nombre : crea un modelo para traer datos de la BD
        php artisan make:model Message
    }

    video 13:
        - php artisan make:request nombre: Crea una clase para requerimientos de interfaz
        php artisan make:request CreateMessageRequest

    Video 14:
        - database/factories/ModelFactory : Generador de contenido
            config/app.php/UserFactory.php 
        - php artisan tinker
            factory(App\Message::class)->make() : Solo lo crea
            factory(App\Message::class)->create() : Crea y guarda
            App\Message::find(#indice)
        
        - database/seeds/DatabaseSeeder.php : Crear desde los seeds , mejor
            php artisan db:seed
            
            php artisan migrate:refresh --seed : rellena la BD con los parametros dados

    Video 15: Paginacion - welcome.blade

    video 16: Autenticacion de usuarios con login
        php artisan make:auth : Hay q modificar varias cosas pal bootstrap-4 , falta creaur un request de requerimientos personalizado

    Video 17: Modificar la tabla de usuarios para añadir un nick y un avatar (mod en los control de autenticac)
        php artisan make:migration add_username_and_avatar_to_users_table --table users
        php artisan migrate

    Video 18: Crear una relacion entre usuarios y mensajes (Message.php)-> Relaciones belongsTo()
        php artisan make:migration add_user_id_column_to_messages_table --table messages
        // primero hay que borrar toda la BD, para tener integridad de datos en las claves 
        php artisan migrate:reset        
        php artisan migrate
        
        // hay Modificacion de vistas y controladores , ademas de los seeds, UserFactory con username y avatar
        // Se ha relacionado cada usuario con un mensaje : DatabaseSeeder :
            php artisan db:seed
        
    Video 19: Obtener todos los mensajes de un usuario con la relacion hasMany()
        Añandida una ruta /{username} , que recibira los nick
        Añadia una funcion en usuario->message() para relacionar los mensajes del usuario
        Añandida una funcion show q relaciona  UsersController con User  y otiene todos los mensajes de un id de usuario
        Añadida una vista users.show q recibe los datos de la linea anterior y los muestra

        - Añadida la fecha de creacion en la vista, luego
            php artisan migrate:refresh  --seed

        Añadida en PageController un latest(), q ordena por mas reciene las fechas de mensajes
        Añadida en User.php un orderBy(), q ordena por mas reciene las fechas de mensajes

    Video 20: Seguimiento entre usuarios
        - Tabla intermedia? , entre usuario y usuario_sigue
            php artisan make:migration create_followers_table --create followers

        Añadia follows y followed en User.php
        Añadia la ruta /{username}/follows q nos dira los follows de determiando usuario
        Añadia la vista users.follows q mostrara los nicks de los usuarios q a losq sigue
        - Borrar todo y crear usuarios con sus follows
            php artisan migrate:refresh  --seed

        Añadido SEGUIR A OTRO USUARIO : users.show un formulario [min 12]->errores

    Video 21: Dejar de seguir a otro usuario
        Añadida la ruta unfollow - raro q solo pasa con get y no con post !!
        Añadida funcion UserController.unfollow() 
        Añadida funcion User.php.isFollowing(), consulta si al q estoy visitando lo estoy o no siguiendo
        Añadida vista que me deja saber cuantos sigue un usuario y cuantos los siguen (mods en vistas)

    Video 23: Crear en developers.facebook
        añadir uso web y obtener el id de suaurio y contraseña

    Video 23: Sesion con facebook
        - Instalar socialite
        composer require laravel/socialite
        Añadir config/app.php   : Laravel\Socialite\SocialiteServiceProvider::class,  (tal vez no-nose)
        Añadir :   ""           : 'Socialite' => Laravel\Socialite\Facades\Socialite::class,
        Añadir el controlador SocialAuthController.php
        Añadir a rutas  facebook
        Añadidas las funciones facebook() y callback()
        Añadir en config.services.php -> 'facebook' => 'client_id' , 'clave' ,' redirect'
        Añadido un boton en la vista login

    Video 24: Registro con facebook
        Cambiar las credenciales a una variable de entorno (quitar lo de config.services.php)

        - Crear un modelo para guiardar los datos que vienen de facebook
            php artisan make:model SocialProfile
            php artisan make:migration create_social_profiles_table --create social_profiles
        Guardar los datos de facebook en una sesion SocialAuthController.callbak() y enviarlos a la vista user.facebook
        La vista user.facebook ya tiene los adtos principales
        Crear una ruta auth/facebook/register, obtener los datos de la session facebook
        Añadir en migatrion.SocialProfile -> user_id. social_id
        Añadir en SocialProfile un guarded=[] , para permitir crear datos y asi quitarle la proteccion
        Añadir en User.php socialProfiles() -> Un usuario tiene muchos perfles, pero el perfil pertenece a un solo usuario
        Añadir en SSocialProfile.php user() -> muchos perfiles tiene un usuario 

        Añadir en SocialAthController.php register(), que creara los datos de usuario y asociara a un perfil, y hara loguin

        Comenzar:
            php artisan migrate
        
        --- Por alguna razon no funcion con post, si con get [web.php/...register, facebook.blade.php->form ]
        --- Aqui hay un  detalle, cada vez q quiero iniciar sesion lo vuelve a registar y eso esta mal
        --- Al parecer cuando me logueo con facebook, siempre debo loguearme con facebook
        --- Parece que nesecito un Model para followers ya que no crea los timestamp() en la BD

    // Video 25: Login con Facebook, pasando por un anterior registro con facebook
        En el vid24, el boton ingresar con facebook , siempre te decia registrar el perfil, pero ahora si ya se gistro una vez 
        , a la siguiente ingresara  directo.
        Añadida SocialAuthController.callback() consulta  que nos dice siya se registro antes con facebook

    // Video 26: Permitir ciertas acciones (mensajes privados , conversaciones : seguidor y seguido)
        
        - Modelos y migration: [ CHEKAR QUE EL MODEL ESTA EN SINGULAR Y LAS MIGRATION SE CREARON EL PLURAL!!!! ]
        php artisan make:model Conversation --migration
        php artisan make:model PrivateMessage --migration
        
        - Tabla intermedia de conversaciones unida a usuarios:
        php artisan make:migration create_conversation_user_table --create conversation_user
        php artisan migrate

        Añadido un formulario que muestra un formulario para el envio de mensajes en users.show.blade

        - Concepto de gate : ? definir reglas.
            App\Providers\AtuhServiceProvider.php boot(), se define una reglas
            y en la interfaz user.show , se añade una condicion para usar la regla

        --- Faltan definir los dropps para las tablas creadas aqui!
        --- Queda por definir la funcion en un controlador para el paso (guardado ) de mesnajes

    // Video 27: Iniciar una conversacion recibirla y poder mostrarla
        Añadir las rutas : Controlador para el paso de mensajes
        Añadido las funciones sendPrivateMessage, atrapa el mensaje, lo convierte en conversacion y lo guarda
        Añadida las funciones users() y privateMessages() que relaciona cada conver con los usuarios y lista los mensajes [respectivament]
        Añadida la funcion showConversation(), precarga todos los usuarios y mensajes relacionados entre si, los bota a la vista}
        Añadida la vista users.conversation.blade.php, muestra los mensajes pasados de a 1 , por ahora!

        --- Problema: en la vista conversation.blade.php  la variable: $message->user->name , no se porque $message o.O

    // Video 28: Garantizar q solo se crea una conversacion al inicio, luego los nuevos van a la primera conversacion entre los usuarios X e Y
        Añadida Conversation-static function between() , obtiene una conversacion si existe , sino la crea
        Modificado UserController sendPrivateMessage() , ahora pregunta si existe conversation en funcion between()
        --- AUN ESTA PENDIENTE EL INPUT DEL MENSAJE , DA ERROR CUANDO ESTA VACIO

    // Video 29 : Subiendo archivos con fileupload

        Añadida el boton de subir en la vista welcome
        - Modificar el MessagesController.php para pedir por la imagen , en vez de generarla aleatoria
            y una carpeta 'messages' que guardara las imagenes
        Chekar congfig.filesystems.php para saber don de guardar

        - Vincular la carpeta public y ahi guardar todo (En windows usar homestead)
        php artisan storage:link
        ls public           //debe salir el vinculo de la carpeta public/storage

        Añadir la ruta en messages.message, TAMBIEN EL .env: APP_URL=http://localhost:8000 ;
            AL FINAL CAMBIADO POR: 

        - Mejor que se fije en si es una ruta propia o una url:
            Modificar Message.php getImageAttribute($image) que devuele una ruta propia o de internet

    // Video 30 : Majeo de errores amigables :)
        Crear la carpeta errors en la carpeta views
        Podemos crear deacuerdo al error , ej: 404.blade.php , 403...

        - Si no existen recursos por URL podemos usar firstOrFail(), eje: en el controlador: UsersControler

        - Si Es un error del servidor podemos configurar un 500.blade.php ,  
                pero atrapandolo en app\exception\handler.php -> PARECE QUE YA NO°°°

        modificar en .env , para APP_DEBUG=false, para ver como usuario

    // Video 31 : Buscar mensajes por contenido
        Añadida los botones en la vista layouts.app 
        Añadido la Fcuncion search() en el controlador MessagesControler
        Añdadida la vista messages.index , que recibe los resultados de search() y los muestra

        --- Probando un required para la publicacion de mesnajes en Welcome.blade
 
    // Video 32 : Un debuger para ver lo q sucede:
        Agregamos una mejora a MessagesController en la busqueda ->search()

Configurar Base de datos:
    Modificar el archivo .env con tu configuracion
    - Conexion con Facebook, se añadio dos variables de entorno:
        FACEBOOK_ID = 
        FACEBOOK_SECRET = 

Helps varios:
    dd($messages) -> muestra todo el contenido en el navegador
    Laravel debuger -> packagist.org -> laravel-debugbar -> composer require barryvdh/laravel-debugbar --dev :
    - Congif.app.php:
        Barryvdh\Debugbar\ServiceProvider::class,
        'Debugbar' => Barryvdh\Debugbar\Facade::class,

        php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"  //creo un config.debugbar.php